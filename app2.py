import streamlit as st
import pandas as pd
from dataclasses import dataclass
from typing import Dict, Any, Tuple
import uuid, datetime, io

st.set_page_config(page_title="Food Healthy App", page_icon="ü•ó", layout="wide")

# ----------------------------
# ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü)
#  columns: id,name_th,name_en,price,calories,protein_g,fat_g,carb_g,sugar_g,image_url,notes
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£/‡∏£‡πâ‡∏≤‡∏ô
# ----------------------------
# ----------------------------
# ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (15 ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢)
# ----------------------------
SAMPLE_ROWS = [
    {
        "id":"1","name_th":"‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏ô‡∏∂‡πà‡∏á + ‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á","name_en":"Steamed Chicken Breast with Brown Rice","price":79,
        "calories":420,"protein_g":40,"fat_g":5,"carb_g":50,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/6/6b/Chicken_rice.jpg",
        "notes":"‡πÄ‡∏°‡∏ô‡∏π‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
    },
    {
        "id":"2","name_th":"‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏¢‡πà‡∏≤‡∏á + ‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å","name_en":"Grilled Salmon with Salad","price":159,
        "calories":480,"protein_g":36,"fat_g":24,"carb_g":18,"sugar_g":3,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/2/2e/Grilled_Salmon.jpg",
        "notes":"‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡πÄ‡∏°‡∏Å‡πâ‡∏≤-3"
    },
    {
        "id":"3","name_th":"‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ","name_en":"Stir-fried Mixed Veggies with Tofu","price":69,
        "calories":300,"protein_g":18,"fat_g":8,"carb_g":30,"sugar_g":6,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/6/6f/Stir_fry_tofu_and_vegetables.jpg",
        "notes":"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡∏ä ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥"
    },
    {
        "id":"4","name_th":"‡πÇ‡∏à‡πä‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏≠‡πä‡∏ï‡∏≠‡∏Å‡πÑ‡∏Å‡πà","name_en":"Oatmeal Porridge with Chicken","price":85,
        "calories":350,"protein_g":25,"fat_g":6,"carb_g":40,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/5/5f/Oatmeal_poridge.jpg",
        "notes":"‡∏¢‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤"
    },
    {
        "id":"5","name_th":"‡πÑ‡∏Ç‡πà‡∏Ç‡∏≤‡∏ß‡∏ï‡πâ‡∏° + ‡∏°‡∏±‡∏ô‡∏´‡∏ß‡∏≤‡∏ô‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô","name_en":"Boiled Egg Whites with Sweet Potato","price":59,
        "calories":280,"protein_g":22,"fat_g":2,"carb_g":45,"sugar_g":10,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/0/0b/Steamed_Sweet_potato.jpg",
        "notes":"‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏ã‡πâ‡∏≠‡∏ô + ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á"
    },
    {
        "id":"6","name_th":"‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏£‡∏ã‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà + ‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á","name_en":"Riceberry with Grilled Chicken","price":89,
        "calories":450,"protein_g":38,"fat_g":6,"carb_g":55,"sugar_g":3,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/b/b0/Riceberry.jpg",
        "notes":"‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡πà‡∏≥"
    },
    {
        "id":"7","name_th":"‡∏™‡∏•‡∏±‡∏î‡∏ó‡∏π‡∏ô‡πà‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏¢‡∏≠‡∏á‡πÄ‡∏ô‡∏™)","name_en":"Tuna Salad (No Mayo)","price":75,
        "calories":260,"protein_g":30,"fat_g":7,"carb_g":15,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/e/e2/Tuna_salad.jpg",
        "notes":"‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ï‡πà‡∏≥ ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á"
    },
    {
        "id":"8","name_th":"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥","name_en":"Chicken Steak with Black Pepper","price":99,
        "calories":380,"protein_g":42,"fat_g":9,"carb_g":18,"sugar_g":1,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/4/44/Grilled_chicken_steak.jpg",
        "notes":"‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô ‡∏Å‡∏¥‡∏ô‡∏≠‡∏¥‡πà‡∏°"
    },
    {
        "id":"9","name_th":"‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏õ‡∏•‡∏≤","name_en":"Fish Rice Soup","price":69,
        "calories":320,"protein_g":28,"fat_g":5,"carb_g":40,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/5/59/Fish_soup.jpg",
        "notes":"‡∏¢‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á"
    },
    {
        "id":"10","name_th":"‡∏™‡∏•‡∏±‡∏î‡πÇ‡∏£‡∏•‡πÑ‡∏Å‡πà","name_en":"Chicken Salad Rolls","price":65,
        "calories":270,"protein_g":22,"fat_g":6,"carb_g":32,"sugar_g":5,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/3/32/Fresh_spring_rolls.jpg",
        "notes":"‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏Å‡∏û‡∏≤‡∏á‡πà‡∏≤‡∏¢"
    },
    {
        "id":"11","name_th":"‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥ + ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà","name_en":"Low-fat Yogurt with Berries","price":59,
        "calories":200,"protein_g":12,"fat_g":3,"carb_g":30,"sugar_g":15,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/3/3e/Yogurt_with_fruit.jpg",
        "notes":"‡πÇ‡∏õ‡∏£‡πÑ‡∏ö‡πÇ‡∏≠‡∏ï‡∏¥‡∏Å‡∏™‡πå‡∏™‡∏π‡∏á"
    },
    {
        "id":"12","name_th":"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏°‡∏±‡∏ô + ‡∏ú‡∏±‡∏Å‡∏¢‡πà‡∏≤‡∏á","name_en":"Lean Beef Steak with Grilled Veggies","price":149,
        "calories":480,"protein_g":40,"fat_g":20,"carb_g":20,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/1/1a/Beef_steak.jpg",
        "notes":"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á"
    },
    {
        "id":"13","name_th":"‡∏™‡∏•‡∏±‡∏î‡∏Ñ‡∏ß‡∏¥‡∏ô‡∏±‡∏ß + ‡∏≠‡∏Å‡πÑ‡∏Å‡πà","name_en":"Quinoa Salad with Chicken","price":129,
        "calories":400,"protein_g":35,"fat_g":10,"carb_g":40,"sugar_g":5,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/8/80/Quinoa_salad.jpg",
        "notes":"‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏ü‡∏π‡πâ‡∏î ‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏π‡∏á"
    },
    {
        "id":"14","name_th":"‡∏™‡∏•‡∏±‡∏î‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°","name_en":"Boiled Egg Salad","price":59,
        "calories":280,"protein_g":20,"fat_g":10,"carb_g":18,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/b/bc/Boiled_eggs_salad.jpg",
        "notes":"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏Ç‡πà + ‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    },
    {
        "id":"15","name_th":"‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•)","name_en":"Tom Yum Goong (No Sugar)","price":95,
        "calories":190,"protein_g":24,"fat_g":7,"carb_g":8,"sugar_g":2,
        "image_url":"https://upload.wikimedia.org/wikipedia/commons/5/5e/Tom_yum_goong.jpg",
        "notes":"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏∏‡πâ‡∏á ‡∏£‡∏™‡∏à‡∏±‡∏î ‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏î‡∏µ"
    },
]


def sample_df() -> pd.DataFrame:
    return pd.DataFrame(SAMPLE_ROWS)

# ----------------------------
# Utilities
# ----------------------------
def filter_numeric(
    df: pd.DataFrame,
    ranges: Dict[str, Tuple[float, float]]
) -> pd.DataFrame:
    out = df.copy()
    for k, (lo, hi) in ranges.items():
        out = out[(out[k] >= lo) & (out[k] <= hi)]
    return out

def ensure_cart():
    if "cart" not in st.session_state:
        st.session_state.cart = {}

def add_to_cart(row: pd.Series, qty: int):
    ensure_cart()
    item_id = str(row["id"])
    if item_id not in st.session_state.cart:
        st.session_state.cart[item_id] = {"row": row.to_dict(), "qty": 0}
    st.session_state.cart[item_id]["qty"] += qty
    st.rerun()  # <-- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: rerun ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

def remove_from_cart(item_id: str):
    ensure_cart()
    if item_id in st.session_state.cart:
        del st.session_state.cart[item_id]
        st.rerun()  # <-- rerun ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö


def cart_total() -> float:
    ensure_cart()
    return sum(v["row"]["price"] * v["qty"] for v in st.session_state.cart.values())

def pay_now(method: str):
    order_id = str(uuid.uuid4())[:8].upper()
    ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    items = [
        {
            "id": k,
            "name": v["row"]["name_th"],
            "qty": v["qty"],
            "unit_price": v["row"]["price"],
            "subtotal": v["row"]["price"] * v["qty"],
        }
        for k, v in st.session_state.cart.items()
    ]
    receipt = {
        "order_id": order_id,
        "paid_at": ts,
        "method": method,
        "items": items,
        "total": cart_total()
    }
    st.session_state.cart = {}
    return receipt

# ----------------------------
# UI: Header & Data source
# ----------------------------
st.title("ü•ó Food Healthy App ‚Äî ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏Å‡∏£‡∏±‡∏°) ‚Üí ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‚Üí ‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‚Üí ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)")

with st.expander("üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á (CSV) ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï"):
    template = pd.DataFrame({
        "id":[""],"name_th":[""],"name_en":[""],"price":[0],
        "calories":[0],"protein_g":[0],"fat_g":[0],"carb_g":[0],"sugar_g":[0],
        "image_url":[""],"notes":[""]
    })
    buf = io.StringIO()
    template.to_csv(buf, index=False, encoding="utf-8")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï CSV", buf.getvalue(), file_name="menu_template.csv", mime="text/csv")
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV (UTF-8, header ‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï)", type=["csv"])

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if uploaded:
    try:
        df = pd.read_csv(uploaded)
        required_cols = {"id","name_th","name_en","price","calories","protein_g","fat_g","carb_g","sugar_g","image_url","notes"}
        missing = required_cols - set(df.columns)
        if missing:
            st.error(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {', '.join(missing)}")
            st.stop()
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()
else:
    df = sample_df()

# ----------------------------
# Sidebar: ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
# ----------------------------
with st.sidebar:
    st.header("üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    ensure_cart()
    if st.session_state.cart:
        for k, v in list(st.session_state.cart.items()):
            row = v["row"]
            col1, col2, col3 = st.columns([4,2,2])
            with col1:
                st.write(f"**{row['name_th']}**")
                st.caption(row["name_en"])
            with col2:
                st.write(f"x {v['qty']}")
            with col3:
                if st.button("‡∏•‡∏ö", key=f"rm_{k}"):
                    remove_from_cart(k)
        st.info(f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {cart_total():,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ----------------------------
# Filters: Numeric ranges
# ----------------------------
st.subheader("üß™ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏Å‡∏£‡∏±‡∏° ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü)")
c1, c2, c3, c4, c5 = st.columns(5)
with c1:
    cal_min, cal_max = st.slider("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ (kcal)", 0, 1200, (0, 800))
with c2:
    pro_min, pro_max = st.slider("‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)", 0, 100, (0, 50))
with c3:
    fat_min, fat_max = st.slider("‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)", 0, 100, (0, 30))
with c4:
    carb_min, carb_max = st.slider("‡∏Ñ‡∏≤‡∏£‡πå‡∏ö (g)", 0, 150, (0, 80))
with c5:
    sug_min, sug_max = st.slider("‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (g)", 0, 100, (0, 15))

ranges = {
    "calories": (cal_min, cal_max),
    "protein_g": (pro_min, pro_max),
    "fat_g": (fat_min, fat_max),
    "carb_g": (carb_min, carb_max),
    "sugar_g": (sug_min, sug_max),
}

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
st.markdown("")
sort_col = st.selectbox("‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°", ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏°‡∏≤‡∏Å‚Üí‡∏ô‡πâ‡∏≠‡∏¢", "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å", "‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å"])
filtered = filter_numeric(df, ranges)

if sort_col == "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏°‡∏≤‡∏Å‚Üí‡∏ô‡πâ‡∏≠‡∏¢":
    filtered = filtered.sort_values("protein_g", ascending=False)
elif sort_col == "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å":
    filtered = filtered.sort_values("calories", ascending=True)
elif sort_col == "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å":
    filtered = filtered.sort_values("sugar_g", ascending=True)
elif sort_col == "‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ô‡πâ‡∏≠‡∏¢‚Üí‡∏°‡∏≤‡∏Å":
    filtered = filtered.sort_values("price", ascending=True)

# ----------------------------
# Results: cards with image
# ----------------------------
st.subheader("üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
if filtered.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏•‡∏≠‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
else:
    cols = st.columns(3)
    for i, row in filtered.reset_index(drop=True).iterrows():
        with cols[i % 3]:
            with st.container(border=True):
                if isinstance(row["image_url"], str) and row["image_url"]:
                    st.image(row["image_url"], use_container_width=True)
                st.markdown(f"**{row['name_th']}**")
                st.caption(row["name_en"])
                st.write(
                    f"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: {int(row['calories'])} kcal | "
                    f"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: {row['protein_g']} g | ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: {row['fat_g']} g | "
                    f"‡∏Ñ‡∏≤‡∏£‡πå‡∏ö: {row['carb_g']} g | ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•: {row['sugar_g']} g"
                )
                st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤: **{row['price']:,.2f} ‡∏ö‡∏≤‡∏ó**")
                if isinstance(row.get("notes",""), str) and row["notes"]:
                    st.caption(f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {row['notes']}")
                qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", 1, 20, 1, key=f"qty_{row['id']}")
                if st.button("‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", key=f"add_{row['id']}"):
                    add_to_cart(row, qty)
                    st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {row['name_th']} x{qty} ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

st.markdown("---")

# ----------------------------
# Checkout
# ----------------------------
st.subheader("üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
left, right = st.columns([2,1])
with left:
    ensure_cart()
    if st.session_state.cart:
        for v in st.session_state.cart.values():
            r = v["row"]
            st.write(f"- {r['name_th']} x {v['qty']} = {r['price'] * v['qty']:,.2f} ‡∏ö‡∏≤‡∏ó")
        st.info(f"‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: **{cart_total():,.2f} ‡∏ö‡∏≤‡∏ó**")
    else:
        st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")

with right:
    pay_method = st.selectbox("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", ["PromptPay (QR)", "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á"])
    pay_btn = st.button("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", type="primary", disabled=(cart_total()==0))
    if pay_btn:
        receipt = pay_now(pay_method)
        st.success(f"‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {receipt['order_id']}")
        with st.expander("‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"):
            st.json(receipt)

st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏ï‡πÄ‡∏ß‡∏¢‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô PromptPay QR ‡∏´‡∏£‡∏∑‡∏≠ Stripe) ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
