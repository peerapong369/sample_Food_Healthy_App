import streamlit as st
from dataclasses import dataclass, asdict
from typing import List, Dict
import uuid
import datetime

st.set_page_config(page_title="Food Healthy App", page_icon="ü•ó", layout="wide")

# ----------------------------
# ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
@dataclass
class MenuItem:
    id: str
    name_th: str
    name_en: str
    price: float
    macros: Dict[str, str]  # ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô/‡πÑ‡∏Ç‡∏°‡∏±‡∏ô/‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•: "‡∏ï‡πà‡∏≥","‡∏Å‡∏•‡∏≤‡∏á","‡∏™‡∏π‡∏á"
    calories: int
    note: str = ""

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
MENU_DB: List[MenuItem] = [
    MenuItem(id="1", name_th="‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏•‡∏±‡∏î", name_en="Grilled Chicken Salad",
             price=89, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏™‡∏π‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏ï‡πà‡∏≥","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=320,
             note="‡∏ô‡πâ‡∏≥‡∏™‡∏•‡∏±‡∏î‡∏á‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"),
    MenuItem(id="2", name_th="‡∏Ç‡πâ‡∏≤‡∏ß‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏•‡∏ß‡∏Å‡∏à‡∏¥‡πâ‡∏°", name_en="Chicken Breast Rice",
             price=79, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏™‡∏π‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏ï‡πà‡∏≥","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏Å‡∏•‡∏≤‡∏á"}, calories=450,
             note="‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥"),
    MenuItem(id="3", name_th="‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", name_en="Grilled Salmon",
             price=159, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏™‡∏π‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏Å‡∏•‡∏≤‡∏á","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=520,
             note="‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤"),
    MenuItem(id="4", name_th="‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ", name_en="Stir-fried Veggies with Tofu",
             price=69, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏Å‡∏•‡∏≤‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏ï‡πà‡∏≥","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=300,
             note="‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏£‡∏≥‡∏Ç‡πâ‡∏≤‡∏ß"),
    MenuItem(id="5", name_th="‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", name_en="Basil Chicken (no sugar)",
             price=75, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏™‡∏π‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏Å‡∏•‡∏≤‡∏á","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=520,
             note="‡πÄ‡∏ú‡πá‡∏î‡∏Å‡∏•‡∏≤‡∏á"),
    MenuItem(id="6", name_th="‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏£‡∏ß‡∏°", name_en="Yogurt with Fruits",
             price=59, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏Å‡∏•‡∏≤‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏ï‡πà‡∏≥","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏Å‡∏•‡∏≤‡∏á"}, calories=280,
             note="‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡πÑ‡∏°‡πâ"),
    MenuItem(id="7", name_th="‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏´‡∏°‡∏π‡∏ã‡∏≠‡∏™‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥", name_en="Pork Steak",
             price=139, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏™‡∏π‡∏á","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏™‡∏π‡∏á","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=610,
             note="‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏Å‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏î"),
    MenuItem(id="8", name_th="‡∏ä‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏•‡πà‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô", name_en="Unsweetened Barley Tea",
             price=25, macros={"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô":"‡∏ï‡πà‡∏≥","‡πÑ‡∏Ç‡∏°‡∏±‡∏ô":"‡∏ï‡πà‡∏≥","‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•":"‡∏ï‡πà‡∏≥"}, calories=5,
             note="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°"),
]

MACRO_KEYS = ["‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•"]
LEVELS = ["‡∏ï‡πà‡∏≥", "‡∏Å‡∏•‡∏≤‡∏á", "‡∏™‡∏π‡∏á"]

# ----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
# ----------------------------
def filter_menu(selected_macros: Dict[str, List[str]]) -> List[MenuItem]:
    """
    ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'
    - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô AND ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    """
    results = []
    for item in MENU_DB:
        ok = True
        for macro_key, selected_levels in selected_macros.items():
            if selected_levels:  # ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                if item.macros.get(macro_key) not in selected_levels:
                    ok = False
                    break
        if ok:
            results.append(item)
    return results

def add_to_cart(item: MenuItem, qty: int = 1):
    if "cart" not in st.session_state:
        st.session_state.cart = {}
    if item.id not in st.session_state.cart:
        st.session_state.cart[item.id] = {"item": item, "qty": 0}
    st.session_state.cart[item.id]["qty"] += qty

def remove_from_cart(item_id: str):
    if "cart" in st.session_state and item_id in st.session_state.cart:
        del st.session_state.cart[item_id]

def cart_total():
    if "cart" not in st.session_state or not st.session_state.cart:
        return 0.0
    return sum(v["item"].price * v["qty"] for v in st.session_state.cart.values())

def pay_now(method: str) -> Dict:
    """
    ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    """
    order_id = str(uuid.uuid4())[:8].upper()
    ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    items = []
    for v in st.session_state.cart.values():
        items.append({
            "id": v["item"].id,
            "name": v["item"].name_th,
            "qty": v["qty"],
            "unit_price": v["item"].price,
            "subtotal": v["item"].price * v["qty"],
        })
    receipt = {
        "order_id": order_id,
        "paid_at": ts,
        "method": method,
        "items": items,
        "total": cart_total()
    }
    # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞
    st.session_state.cart = {}
    return receipt

# ----------------------------
# UI
# ----------------------------
st.title("ü•ó Food Healthy App")
st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‚Üí ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‚Üí ‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‚Üí ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô")

with st.sidebar:
    st.header("üß™ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    selected_macros = {}
    for k in MACRO_KEYS:
        selected_levels = st.multiselect(
            f"{k} (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö)",
            LEVELS,
            default=[],
            key=f"macro_{k}"
        )
        selected_macros[k] = selected_levels

    st.markdown("---")
    st.subheader("üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    if "cart" not in st.session_state:
        st.session_state.cart = {}

    if st.session_state.cart:
        for item_id, data in list(st.session_state.cart.items()):
            item = data["item"]
            qty = data["qty"]
            col1, col2, col3 = st.columns([3, 2, 1])
            with col1:
                st.write(f"**{item.name_th}**")
                st.caption(item.name_en)
            with col2:
                st.write(f"x {qty}")
            with col3:
                if st.button("‡∏•‡∏ö", key=f"rm_{item_id}"):
                    remove_from_cart(item_id)
        st.info(f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {cart_total():,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.write("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á")

# Section 1‚Äì2: Filter + ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
st.subheader("üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
filtered = filter_menu(selected_macros)
if not filtered:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
else:
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    cols = st.columns(3)
    for i, item in enumerate(filtered):
        with cols[i % 3]:
            with st.container(border=True):
                st.markdown(f"**{item.name_th}**")
                st.caption(item.name_en)
                st.write(f"‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ: {item.calories} kcal")
                st.write(
                    f"‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: {item.macros['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô']} | "
                    f"‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: {item.macros['‡πÑ‡∏Ç‡∏°‡∏±‡∏ô']} | "
                    f"‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•: {item.macros['‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•']}"
                )
                if item.note:
                    st.caption(f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item.note}")
                st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤: **{item.price:,.2f} ‡∏ö‡∏≤‡∏ó**")

                qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1, max_value=20, value=1, key=f"qty_{item.id}")
                if st.button("‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", key=f"add_{item.id}"):
                    add_to_cart(item, qty)
                    st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {item.name_th} x{qty} ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

st.markdown("---")

# Section 3‚Äì4: Checkout + Payment
st.subheader("üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
left, right = st.columns([2, 1], gap="large")

with left:
    st.write("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞:")
    if st.session_state.cart:
        for v in st.session_state.cart.values():
            st.write(f"- {v['item'].name_th} x {v['qty']} = {v['item'].price * v['qty']:,.2f} ‡∏ö‡∏≤‡∏ó")
        st.info(f"‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: **{cart_total():,.2f} ‡∏ö‡∏≤‡∏ó**")
    else:
        st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")

with right:
    pay_method = st.selectbox("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", ["PromptPay", "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á"])
    if st.button("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", type="primary", disabled=(cart_total() == 0)):
        receipt = pay_now(pay_method)
        st.success(f"‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {receipt['order_id']}")
        with st.expander("‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"):
            st.json(receipt)

# Footer
st.markdown("---")
st.caption("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡πÇ‡∏°: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á/‡πÄ‡∏Å‡∏ï‡πÄ‡∏ß‡∏¢‡πå‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô Omise/Stripe/PromptPay QR) ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
